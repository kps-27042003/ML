
Open In Colab

### 1. Data Loading and Preprocessing:


import pandas as pd

# Load NHANES dataset
from google.colab import files

# Upload the CSV file
uploaded = files.upload()
df = pd.read_csv('heart.csv')
df.head()


# Select relevant columns
selected_columns = ["cp", "age", "sex", "trestbps", "chol"]  # Replace with actual column names
df = df[selected_columns]

# Handle missing values if any
df = df.dropna()  # You may need a more sophisticated imputation strategy



### 2. Data Exploration:


# Explore the dataset
print(df.head())
print(df.describe())

# Analyze distribution of patients
age_sex_distribution = df.groupby(['age', 'sex']).size().reset_index(name='Count')
print(age_sex_distribution)


### 3. Model Selection:


from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, r2_score, roc_auc_score
from sklearn.ensemble import RandomForestClassifier  # Replace with your chosen model

# Define features and labels
X = df.drop(["cp", "trestbps", "chol"], axis=1)  # Adjust columns accordingly
y = df["trestbps_Label"]  # Replace with actual label column

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestClassifier()  # Change to your preferred model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
r2 = r2_score(y_test, y_pred)  # Not applicable for classification
roc_auc = roc_auc_score(y_test, y_pred)

print(f"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1: {f1}, R2: {r2}, AUC: {roc_auc}")


### 4. Performance Tuning:

### 5. Heart Issues Analysis:


# Analyze cardiovascular health in different age ranges and genders
# Calculate the number of patients with heart issues within each category

# Determine overall population examined before the pandemic
total_population = len(df)

# ...



### 6. Generate Code and CSV File:




# Save results to CSV
results_df = pd.DataFrame({"Metric": ["Accuracy", "Precision", "Recall", "F1", "R2", "AUC"],
                           "Value": [accuracy, precision, recall, f1, r2, roc_auc]})

results_df.to_csv("model_performance_metrics.csv", index=False)


     
Upload widget is only available when the cell has been executed in the current browser session. Please rerun this cell to enable.
Saving heart.csv to heart (7).csv
   cp  age  sex  trestbps  chol
0   0   52    1       125   212
1   0   53    1       140   203
2   0   70    1       145   174
3   0   61    1       148   203
4   0   62    0       138   294
                cp          age          sex     trestbps        chol
count  1025.000000  1025.000000  1025.000000  1025.000000  1025.00000
mean      0.942439    54.434146     0.695610   131.611707   246.00000
std       1.029641     9.072290     0.460373    17.516718    51.59251
min       0.000000    29.000000     0.000000    94.000000   126.00000
25%       0.000000    48.000000     0.000000   120.000000   211.00000
50%       1.000000    56.000000     1.000000   130.000000   240.00000
75%       2.000000    61.000000     1.000000   140.000000   275.00000
max       3.000000    77.000000     1.000000   200.000000   564.00000
    age  sex  Count
0    29    1      4
1    34    0      3
2    34    1      3
3    35    0      4
4    35    1     11
..  ...  ...    ...
68   70    1     14
69   71    0     11
70   74    0      3
71   76    0      3
72   77    1      3

[73 rows x 3 columns]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3801             try:
-> 3802                 return self._engine.get_loc(casted_key)
   3803             except KeyError as err:

/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'trestbps_Label'

The above exception was the direct cause of the following exception:

KeyError                                  Traceback (most recent call last)
<ipython-input-8-007957f024f6> in <cell line: 45>()
     43 # Define features and labels
     44 X = df.drop(["cp", "trestbps", "chol"], axis=1)  # Adjust columns accordingly
---> 45 y = df["trestbps_Label"]  # Replace with actual label column
     46 
     47 # Split the dataset

/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   3805             if self.columns.nlevels > 1:
   3806                 return self._getitem_multilevel(key)
-> 3807             indexer = self.columns.get_loc(key)
   3808             if is_integer(indexer):
   3809                 indexer = [indexer]

/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3802                 return self._engine.get_loc(casted_key)
   3803             except KeyError as err:
-> 3804                 raise KeyError(key) from err
   3805             except TypeError:
   3806                 # If we have a listlike key, _check_indexing_error will raise

KeyError: 'trestbps_Label'
